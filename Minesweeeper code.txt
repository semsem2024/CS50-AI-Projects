
Minesweeper :

import itertools
import random


class Minesweeper():
    """
    Minesweeper game representation
    """

    def __init__(self, height=8, width=8, mines=8):

        # Set initial width, height, and number of mines
        self.height = height
        self.width = width
        self.mines = set()

        # Initialize an empty field with no mines
        self.board = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                row.append(False)
            self.board.append(row)

        # Add mines randomly
        while len(self.mines) != mines:
            i = random.randrange(height)
            j = random.randrange(width)
            if not self.board[i][j]:
                self.mines.add((i, j))
                self.board[i][j] = True

        # At first, player has found no mines
        self.mines_found = set()

    def print(self):
        """
        Prints a text-based representation
        of where mines are located.
        """
        for i in range(self.height):
            print("--" * self.width + "-")
            for j in range(self.width):
                if self.board[i][j]:
                    print("|X", end="")
                else:
                    print("| ", end="")
            print("|")
        print("--" * self.width + "-")

    def is_mine(self, cell):
        i, j = cell
        return self.board[i][j]

    def nearby_mines(self, cell):
        """
        Returns the number of mines surrounding a cell.
        """
        count = 0
        for i in range(cell[0] - 1, cell[0] + 2):
            for j in range(cell[1] - 1, cell[1] + 2):
                if (i, j) == cell:
                    continue
                if 0 <= i < self.height and 0 <= j < self.width:
                    if self.board[i][j]:
                        count += 1
        return count

    def won(self):
        """
        Checks if all mines have been flagged.
        """
        return self.mines_found == self.mines


class Sentence():
    """
    Logical statement about a Minesweeper game
    A sentence is a set of board cells, and a count of how many are mines.
    Example: {A, B, C} = 2
    """

    def __init__(self, cells, count):
        self.cells = set(cells)
        self.count = count

    def __eq__(self, other):
        return self.cells == other.cells and self.count == other.count

    def __str__(self):
        return f"{self.cells} = {self.count}"

    # --- Methods you need to finish ---

    def known_mines(self):
        """
        If count == number of cells, then all are mines
        """
        if len(self.cells) == self.count and self.count != 0:
            return set(self.cells)
        return set()

    def known_safes(self):
        """
        If count is zero, then all cells are safe
        """
        if self.count == 0 and len(self.cells) > 0:
            return set(self.cells)
        return set()

    def mark_mine(self, cell):
        """
        If we know a cell is a mine, remove it from sentence and reduce count
        """
        if cell in self.cells:
            self.cells.remove(cell)
            self.count -= 1

    def mark_safe(self, cell):
        """
        If we know a cell is safe, just remove it from the sentence
        """
        if cell in self.cells:
            self.cells.remove(cell)


class MinesweeperAI():
    """
    AI player for the Minesweeper game
    """

    def __init__(self, height=8, width=8):

        # Set initial height and width
        self.height = height
        self.width = width

        # Keep track of moves made
        self.moves_made = set()

        # Cells known to be safe or mines
        self.mines = set()
        self.safes = set()

        # Knowledge base of sentences
        self.knowledge = []

    def mark_mine(self, cell):
        self.mines.add(cell)
        for sentence in self.knowledge:
            sentence.mark_mine(cell)

    def mark_safe(self, cell):
        self.safes.add(cell)
        for sentence in self.knowledge:
            sentence.mark_safe(cell)

    def add_knowledge(self, cell, count):
        """
        Called when the AI uncovers a safe cell with a count of nearby mines.
        """
        # 1. Remember the move
        self.moves_made.add(cell)

        # 2. Mark the cell as safe
        self.mark_safe(cell)

        # 3. Build a new sentence based on neighbors
        neighbors = set()
        (i, j) = cell
        for di in range(-1, 2):
            for dj in range(-1, 2):
                if (di, dj) == (0, 0):
                    continue
                ni, nj = i + di, j + dj
                if 0 <= ni < self.height and 0 <= nj < self.width:
                    if (ni, nj) not in self.safes and (ni, nj) not in self.mines:
                        neighbors.add((ni, nj))
                    elif (ni, nj) in self.mines:
                        # if we already know itâ€™s a mine, adjust count
                        count -= 1

        new_sentence = Sentence(neighbors, count)
        if new_sentence not in self.knowledge and len(neighbors) > 0:
            self.knowledge.append(new_sentence)

        # 4. Keep making inferences until nothing changes
        changed = True
        while changed:
            changed = False

            safes_found = set()
            mines_found = set()

            for s in self.knowledge:
                safes_found |= s.known_safes()
                mines_found |= s.known_mines()

            if safes_found:
                for s in safes_found:
                    if s not in self.safes:
                        self.mark_safe(s)
                        changed = True

            if mines_found:
                for m in mines_found:
                    if m not in self.mines:
                        self.mark_mine(m)
                        changed = True

            # subset inference: if sentence A is subset of B, infer new
            new_sentences = []
            for s1 in self.knowledge:
                for s2 in self.knowledge:
                    if s1 == s2:
                        continue
                    if s1.cells and s1.cells.issubset(s2.cells):
                        diff_cells = s2.cells - s1.cells
                        diff_count = s2.count - s1.count
                        new_s = Sentence(diff_cells, diff_count)
                        if new_s not in self.knowledge and new_s not in new_sentences:
                            if len(new_s.cells) > 0:
                                new_sentences.append(new_s)
            if new_sentences:
                self.knowledge.extend(new_sentences)
                changed = True

    def make_safe_move(self):
        """
        Returns a safe move not yet made, if one exists
        """
        for move in self.safes:
            if move not in self.moves_made:
                return move
        return None

    def make_random_move(self):
        """
        Picks randomly among cells not yet chosen and not known to be mines
        """
        choices = []
        for i in range(self.height):
            for j in range(self.width):
                if (i, j) not in self.moves_made and (i, j) not in self.mines:
                    choices.append((i, j))
        if choices:
            return random.choice(choices)
        return None
