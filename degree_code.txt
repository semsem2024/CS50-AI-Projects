from util import QueueFrontier

def shortest_path(source, target):
    """
    Returns the shortest list of (movie_id, person_id) pairs
    that connect the source to the target.

    If no connection, return None.
    """

    # frontier for BFS
    frontier = QueueFrontier()
    frontier.add(Node(state=source, parent=None, action=None))

    # explored set
    explored = set()

    while not frontier.empty():
        node = frontier.remove()

        # if this node is the target, reconstruct the path
        if node.state == target:
            path = []
            while node.parent is not None:
                path.append((node.action, node.state))
                node = node.parent
            path.reverse()
            return path

        explored.add(node.state)

        # expand neighbors
        for movie_id, person_id in neighbors_for_person(node.state):
            if person_id not in explored and not frontier.contains_state(person_id):
                child = Node(state=person_id, parent=node, action=movie_id)
                if person_id == target:
                    # build path right away instead of adding
                    path = []
                    while child.parent is not None:
                        path.append((child.action, child.state))
                        child = child.parent
                    path.reverse()
                    return path
                frontier.add(child)

    return None
