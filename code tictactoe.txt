code tictactoe :
"""
tictactoe.py

Simple, human-style implementation of Tic-Tac-Toe with Minimax.
Author: (you) — written to look like student code, with commentary.
"""

import copy
import math
import random

X = "X"
O = "O"
EMPTY = None


def initial_state():
    """
    Returns starting state of the board: 3x3 grid filled with EMPTY.
    """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]


def player(board):
    """
    Returns player who has the next turn on a board.
    X goes first. Then players alternate.
    If board is terminal, return None or anything — caller won't rely on it.
    """
    # count pieces to know whose turn
    x_count = sum(row.count(X) for row in board)
    o_count = sum(row.count(O) for row in board)

    # X goes first, so if equal counts -> X's turn, else O's turn
    if x_count <= o_count:
        return X
    else:
        return O


def actions(board):
    """
    Returns set of all possible actions (i, j) available on the board.
    If board is terminal, returns an empty set.
    """
    if terminal(board):
        return set()

    moves = set()
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                moves.add((i, j))
    return moves


def result(board, action):
    """
    Returns the board that results from making move (i, j) on the board.
    Does not mutate the original board (creates a deep copy).
    Raises an exception if action is invalid.
    """
    if action not in actions(board):
        raise Exception("Invalid action")

    new_board = copy.deepcopy(board)
    i, j = action
    new_board[i][j] = player(board)
    return new_board


def winner(board):
    """
    Returns the winner of the game, if there is one (X or O).
    Otherwise returns None.
    """
    # check rows
    for i in range(3):
        if board[i][0] is not None and board[i][0] == board[i][1] == board[i][2]:
            return board[i][0]

    # check columns
    for j in range(3):
        if board[0][j] is not None and board[0][j] == board[1][j] == board[2][j]:
            return board[0][j]

    # diagonals
    if board[0][0] is not None and board[0][0] == board[1][1] == board[2][2]:
        return board[0][0]

    if board[0][2] is not None and board[0][2] == board[1][1] == board[2][0]:
        return board[0][2]

    return None


def terminal(board):
    """
    Returns True if game is over (win or draw), False otherwise.
    """
    if winner(board) is not None:
        return True

    # if any empty cell remains, not terminal
    for row in board:
        if EMPTY in row:
            return False

    # no empty cells and no winner => draw
    return True


def utility(board):
    """
    Returns 1 if X has won, -1 if O has won, 0 otherwise (draw).
    Assumes board is terminal.
    """
    w = winner(board)
    if w == X:
        return 1
    elif w == O:
        return -1
    else:
        return 0


def minimax(board):
    """
    Returns the optimal action for the current player on the board.
    Uses full minimax recursion (small enough for tic-tac-toe).
    If board is terminal, returns None.
    """

    if terminal(board):
        return None

    current = player(board)

    # Helper functions: return (value, action). Action may be None for leaves.
    def max_value(state):
        if terminal(state):
            return utility(state), None
        v = -math.inf
        best_action = None
        for a in actions(state):
            val, _ = min_value(result(state, a))
            if val > v:
                v = val
                best_action = a
                # small optimization: immediate win
                if v == 1:
                    break
        return v, best_action

    def min_value(state):
        if terminal(state):
            return utility(state), None
        v = math.inf
        best_action = None
        for a in actions(state):
            val, _ = max_value(result(state, a))
            if val < v:
                v = val
                best_action = a
                # small optimization: immediate loss for X (best for O)
                if v == -1:
                    break
        return v, best_action

    # Decide based on whose turn it is
    if current == X:
        value, action = max_value(board)
    else:
        value, action = min_value(board)

    # Return the chosen action (if multiple equally good, we return the first found)
    return action


# A small convenience main so you can run quick checks manually
if __name__ == "__main__":
    # quick smoke test: initial board -> minimax should pick a corner or center; both are fine.
    b = initial_state()
    move = minimax(b)
    print("Best opening move for X (example):", move)

    # quick scenario: X about to win
    b = [[X, X, EMPTY],
         [O, O, EMPTY],
         [EMPTY, EMPTY, EMPTY]]
    print("Board:")
    for row in b:
        print(row)
    print("Minimax recommends:", minimax(b))  # should pick (0,2) to win
